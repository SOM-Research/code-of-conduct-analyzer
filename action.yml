name: 'Send Code of Conduct'
description: 'Checks for CODE_OF_CONDUCT.md and processes it'
inputs:
  GITHUB_TOKEN:
    description: 'GitHub Token'
    required: true
  SERVER:
    description: 'Server URL to send the code of conduct'
    required: true
  bot_user:
    description: 'Bot GitHub username'
    required: true
  bot_token:
    description: 'Bot GitHub token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        persist-credentials: false
        fetch-depth: 0

    - name: Install jq
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y jq

    - name: Check if actor is bot user
      id: check_actor
      shell: bash
      run: |
        if [ "${{ github.actor }}" == "${{ inputs.bot_user }}" ]; then
          echo "actor_is_bot=true" >> $GITHUB_ENV
        else
          echo "actor_is_bot=false" >> $GITHUB_ENV
        fi

    - name: Create data directory
      if: env.actor_is_bot != 'true'
      shell: bash
      run: mkdir -p data

    - name: Save comment details to JSON file
      if: env.actor_is_bot != 'true'
      shell: bash
      run: |
        COMMENT_URL="${{ github.event.comment.html_url }}"
        if echo "$COMMENT_URL" | grep -q "pull"; then
          EVENT_TYPE="pull request"
        elif echo "$COMMENT_URL" | grep -q "discussion"; then
          EVENT_TYPE="discussion"
        else
          EVENT_TYPE="issue"
        fi

        if [[ "${{ github.event_name }}" == "issue_comment" || "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
          jq -n --arg type "comment" \
                --arg comment_id "${{ github.event.comment.id }}" \
                --arg user "${{ github.event.comment.user.login }}" \
                --arg user_id "${{ github.event.comment.user.id }}" \
                --arg user_avatar_url "${{ github.event.comment.user.avatar_url }}" \
                --arg user_html_url "${{ github.event.comment.user.html_url }}" \
                --arg user_type "${{ github.event.comment.user.type }}" \
                --arg event_type "$EVENT_TYPE" \
                --arg event_number "${{ github.event.issue.number }}" \
                --arg event_title "${{ github.event.issue.title }}" \
                --arg event_body "${{ github.event.issue.body }}" \
                --arg comment_body "${{ github.event.comment.body }}" \
                --arg created_at "${{ github.event.comment.created_at }}" \
                --arg updated_at "${{ github.event.comment.updated_at }}" \
                --arg event_url "${{ github.event.issue.html_url }}" \
                --arg comment_url "${{ github.event.comment.html_url }}" \
                --arg repository_name "${{ github.repository }}" \
                --arg repository_full_name "${{ github.repository.full_name }}" \
                --arg repository_html_url "${{ github.repository.html_url }}" \
                '{type: $type, data: {comment_id: $comment_id, user: $user, user_id: $user_id, user_avatar_url: $user_avatar_url, user_html_url: $user_html_url, user_type: $user_type, event_type: $event_type, event_number: $event_number, event_title: $event_title, event_body: $event_body, comment_body: $comment_body, created_at: $created_at, updated_at: $updated_at, event_url: $event_url, comment_url: $comment_url, repository_name: $repository_name, repository_full_name: $repository_full_name, repository_html_url: $repository_html_url}}' > data/comment.json
        elif [[ "${{ github.event_name }}" == "discussion_comment" ]]; then
          jq -n --arg type "comment" \
                --arg comment_id "${{ github.event.comment.id }}" \
                --arg user "${{ github.event.comment.user.login }}" \
                --arg user_id "${{ github.event.comment.user.id }}" \
                --arg user_avatar_url "${{ github.event.comment.user.avatar_url }}" \
                --arg user_html_url "${{ github.event.comment.user.html_url }}" \
                --arg user_type "${{ github.event.comment.user.type }}" \
                --arg event_type "$EVENT_TYPE" \
                --arg event_number "${{ github.event.discussion.number }}" \
                --arg event_title "${{ github.event.discussion.title }}" \
                --arg event_body "${{ github.event.discussion.body }}" \
                --arg comment_body "${{ github.event.comment.body }}" \
                --arg created_at "${{ github.event.comment.created_at }}" \
                --arg updated_at "${{ github.event.comment.updated_at }}" \
                --arg event_url "${{ github.event.discussion.html_url }}" \
                --arg comment_url "${{ github.event.comment.html_url }}" \
                --arg repository_name "${{ github.repository }}" \
                --arg repository_full_name "${{ github.repository.full_name }}" \
                --arg repository_html_url "${{ github.repository.html_url }}" \
                '{type: $type, data: {comment_id: $comment_id, user: $user, user_id: $user_id, user_avatar_url: $user_avatar_url, user_html_url: $user_html_url, user_type: $user_type, event_type: $event_type, event_number: $event_number, event_title: $event_title, event_body: $event_body, comment_body: $comment_body, created_at: $created_at, updated_at: $updated_at, event_url: $event_url, comment_url: $comment_url, repository_name: $repository_name, repository_full_name: $repository_full_name, repository_html_url: $repository_html_url}}' > data/comment.json
        fi
        cat data/comment.json

    - name: Check if CODE_OF_CONDUCT.md exists
      id: check_coc
      shell: bash
      run: |
        if [ -f CODE_OF_CONDUCT.md ]; then
          echo "coc_file=CODE_OF_CONDUCT.md" >> $GITHUB_ENV
        else
          echo "No CODE_OF_CONDUCT.md file found"
          echo "missing_coc=true" >> $GITHUB_ENV
        fi

    - name: Trigger Handle Repos without Code of Conduct Action
      if: env.missing_coc == 'true'
      uses: SOM-Research/code-of-conduct-initializer@v1
      with:
        USER_GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        EVENT_ACTION: 'no_code_of_conduct'

    - name: Stop When No CoC
      if: env.missing_coc == 'true'
      shell: bash
      run: exit 1

    - name: Check if CODE_OF_CONDUCT.md has more than 5 lines
      id: check_lines
      shell: bash
      run: |
        line_count=$(wc -l < ${{ env.coc_file }})
        echo "line_count=$line_count" >> $GITHUB_ENV
        if [ $line_count -le 5 ]; then
          echo "CODE_OF_CONDUCT.md has 5 lines or less"
          echo "incomplete_coc=true" >> $GITHUB_ENV
          exit 1
        fi

    - name: Read Code of Conduct
      id: read_coc
      shell: bash
      run: |
        mkdir -p data
        content=$(cat ${{ env.coc_file }})
        echo "$content" > data/code_of_conduct.txt

    - name: Get repository details
      id: repo_details
      shell: bash
      run: |
        echo "repo_name=${{ github.repository }}" >> $GITHUB_ENV
        echo "repo_url=https://github.com/${{ github.repository }}" >> $GITHUB_ENV

    - name: Convert Code of Conduct to JSON
      id: convert_to_json
      shell: bash
      run: |
        content=$(cat data/code_of_conduct.txt)
        repo_name="${{ env.repo_name }}"
        repo_url="${{ env.repo_url }}"
        jq -n --arg type "code_of_conduct" --arg code_of_conduct "$content" --arg repository_name "$repo_name" --arg repository_url "$repo_url" '{type: $type, code_of_conduct: $code_of_conduct, repository_name: $repository_name, repository_url: $repository_url}' > data/payload.json
        cat data/payload.json

    - name: Send Code of Conduct to server
      id: send_coc
      shell: bash
      run: |
        response=$(curl -s -X POST "${{ inputs.SERVER }}" -H "Content-Type: application/json" --data @data/payload.json)
        echo "$response" > data/response.json
        cat data/response.json

    - name: Check response status
      id: check_response
      shell: bash
      run: |
        status=$(jq -r '.data.status' data/response.json)
        echo "status=$status" >> $GITHUB_ENV
        flags=$(jq -c '.data.flags' data/response.json)
        echo "Flags: $flags"
        echo "flags=$flags" >> $GITHUB_ENV

    - name: Send Comment and Flags to Comment-Analyzer
      uses: SOM-Research/comment-analyzer@v2
      with:
        github_token: ${{ inputs.GITHUB_TOKEN }}
        server_url: ${{ inputs.SERVER }}
        sendinblue_api_key: ${{ secrets.SENDINBLUE_API_KEY }}
        email_from: "your-email@example.com"
        email_to: "recipient@example.com"
        bot_user: ${{ inputs.bot_user }}
        bot_token: ${{ inputs.bot_token }}
      env:
        comment_json: data/comment.json
        flags: ${{ env.flags }}

    - name: Calculate missing flags
      id: calculate_missing_flags
      shell: bash
      run: |
        required_flags=("F1" "F2" "F3" "F4" "F5" "F6" "F7" "F8" "F9" "F10")
        flags=$(echo '${{ env.flags }}' | jq -r 'keys[]')
        missing_flags=()
        for required_flag in "${required_flags[@]}"; do
          if ! echo "$flags" | grep -q "$required_flag"; then
            missing_flags+=("$required_flag")
          fi
        done
        missing_flags_str=$(IFS=','; echo "${missing_flags[*]}")
        echo "missing_flags=$missing_flags_str" >> $GITHUB_ENV

    - name: Check Contributor Covenant Version
      id: check_version
      shell: bash
      run: |
        version=$(jq -r '.data.contributor_covenant_version' data/response.json)
        echo "version=$version" >> $GITHUB_ENV

    - name: Trigger Handle Contributor Covenant Version 1.4 Action
      if: env.version == '1.4'
      uses: SOM-Research/code-of-conduct-initializer@v1
      with:
        USER_GITHUB_TOKEN: ${{ inputs.GITHUB_TOKEN }}
        EVENT_ACTION: 'handle_contributor_covenant_1_4'

    - name: Trigger Issue Creation Workflow
      if: env.missing_flags != '' && env.status == 'analyzed'
      shell: bash
      run: |
        curl -X POST \
          -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ github.token }}" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type":"create_issue_for_missing_guidelines","client_payload":{"repo_name":"${{ github.repository }}","repo_url":"https://github.com/${{ github.repository }}","missing_flags":"${{ env.missing_flags }}"}}'

